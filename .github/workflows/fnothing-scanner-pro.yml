name: fnothing — Global Scanner PRO

on:
  schedule:
    - cron: "*/30 * * * *"   # alle 30 Minuten
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Nur zum Gegencheck (true/false, keine Werte)
      - name: Check env presence
        run: |
          node -e "console.log({
            OPENAI: !!process.env.OPENAI_API_KEY,
            ONE_APP: !!process.env.ONESIGNAL_APP_ID,
            ONE_REST: !!process.env.ONESIGNAL_REST_KEY
          })"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}
          ONESIGNAL_REST_KEY: ${{ secrets.ONESIGNAL_REST_KEY || vars.ONESIGNAL_REST_KEY }}
          ONESIGNAL_APP_ID: ${{ secrets.ONESIGNAL_APP_ID || vars.ONESIGNAL_APP_ID }}

      # Ordner, in den der Scanner schreibt
      - name: Ensure reports dir
        run: mkdir -p reports

      - name: Run scanner
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}
          ONESIGNAL_REST_KEY: ${{ secrets.ONESIGNAL_REST_KEY || vars.ONESIGNAL_REST_KEY }}
          ONESIGNAL_APP_ID: ${{ secrets.ONESIGNAL_APP_ID || vars.ONESIGNAL_APP_ID }}
          SCORE_THRESHOLD: "72"
          QUIET_TZ: "Europe/Berlin"
          QUIET_START: "23"
          QUIET_END: "6"
          DEDUPE_HOURS: "6"
          CONCURRENCY: "4"
          MAX_HEADLINES: "4"
        run: node scanner.mjs

      # Zeig' im Log, was erzeugt wurde
      - name: Show generated reports
        run: |
          echo "PWD: $(pwd)"
          ls -la
          echo "reports/:"
          ls -la reports || true
          echo "latest preview:"
          head -c 1200 reports/latest.json || true

           # Zeig' im Log, was erzeugt wurde
      - name: Show generated reports
        run: |
          echo "PWD: $(pwd)"
          ls -la
          echo "reports/:"
          ls -la reports || true
          echo "latest preview:"
          head -c 1200 reports/latest.json || true

      # Commit ins Repo (erst state.json sicher anlegen, dann getrennt adden)
      - name: Commit reports & dedupe state
        run: |
          git config user.name "fnothing-bot"
          git config user.email "bot@users.noreply.github.com"

          # state.json anlegen, falls nicht vorhanden
          [ -f state.json ] || echo "{}" > state.json

          # getrennt adden, damit ein fehlendes File den anderen Add nicht abbricht
          git add -A reports
          git add state.json

          if git diff --cached --quiet; then
            echo "No changes."
          else
            git commit -m "scanner: update report/state $(date -u +%FT%TZ)" || true
            git push
          fi

      # (optional) zusätzlich als Artifact hochladen
      - name: Upload reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ github.run_id }}
          path: |
            reports/*.json
            state.json
          if-no-files-found: ignore
